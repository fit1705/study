#include <stdio.h>
#include <malloc.h>
#define Vertex struct vertex 
#define List struct list

List {
  List *next;
  Vertex* vert;
};

Vertex {
  int item;
  int color;
  List* conflicts;
};

List* add_list(List* L, Vertex* v){
  List* tmp = (List*)malloc(sizeof(List));
  tmp-> vert = v;
  tmp->next = NULL;
    if(!L)
      return tmp;
  List* cur = L;
  while (cur->next)
    cur = cur->next;
  cur->next = tmp;
  return L;
}

Vertex* add_vert(int v){
  Vertex* tmp = (Vertex*)malloc(sizeof(Vertex));
  tmp->item = v;
  tmp->color = 0;
  tmp->conflicts = NULL;
  return tmp;
}

Vertex* index(List* L, int id){
  List* cur = L;
  if (!L)
    return NULL;
  while((cur)&&(cur->vert->item != id))
    cur = cur-> next;
  if (!cur)
    return NULL;
  return cur->vert;
} 

void add_conflict(List* L, int first, int second){
  Vertex* F = index(L, first);
  Vertex* S = index(L, second);
  add_list(F->conflicts, S);
  add_list(S->conflicts, F);
}

void print(List *L, FILE *fout){
  List* cur = L;
  List* cur_vert;
  //Vertex* v;
  //printf("2check");
  while(cur){
    cur_vert = cur->vert->conflicts;
    fprintf(fout,"1check");
    while(cur_vert){
        fprintf(fout,"3check");
      fprintf(fout, "%d ", cur_vert->vert->item);
      cur_vert = cur_vert->next;
    }
    fprintf(fout,"\n");
    cur = cur->next;
  }
}

int main() {
  FILE *fin;
  fin = fopen("in.txt", "r");
  FILE *fout;
  fout = fopen("out.txt" , "w");
  int i =0;
  List* G = NULL;
  int N =0;
  int M = 0;
  int animal1;
  int animal2;
  fscanf (fin, "%d %d", &N , &M);
  for (i = 0; i < N; i++){
    G = add_list(G, add_vert(i));
  }
  for (i = 0; i < M; i++){
    fscanf(fin, "%d %d", &animal1 , &animal2);
      add_conflict(G,  animal1 - 1, animal2 - 1);
  }
    print(G, fout);
}
